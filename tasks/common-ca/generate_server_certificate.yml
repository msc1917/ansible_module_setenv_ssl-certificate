---
# Debug-Output for the mapping-tables
# - name: List global table ssl_mac_address_list
#   ansible.builtin.debug: 
#     var: hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_mac_address_list']
# - name: List global table ssl_dev_name_to_ip_address_list
#   ansible.builtin.debug: 
#     var: hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_dev_name_to_ip_address_list']
# - name: List global table ssl_dev_name_to_domainname_list
#   ansible.builtin.debug: 
#     var: hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_dev_name_to_domainname_list']

- name: Set actual devicename, ip-addresses and domains
  ansible.builtin.set_fact:
    act_dev_name:             "{{ hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_mac_address_list'][ansible_facts['default_ipv4']['macaddress']] }}"
    act_ip_address:           "{{ hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_dev_name_to_ip_address_list'][hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_mac_address_list'][ansible_facts['default_ipv4']['macaddress']]] | unique | sort }}"
    act_dommain_list:         "{{ hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_dev_name_to_domainname_list'][hostvars[ssl_certificate_authority.ssl_ca_host]['ssl_mac_address_list'][ansible_facts['default_ipv4']['macaddress']]] | unique | sort }}"

- name: Add serveNet_ip and serveNet_domain if exists
  ansible.builtin.set_fact:
    act_ip_address:           "{{ act_ip_address|default([]) + [serveNet_ip] | unique | sort }}"
    act_dommain_list:         "{{ act_dommain_list|default([]) + [inventory_hostname_short.rstrip('.') + '.' + subnet.serveNet.domain_add.rstrip('.') + '.' + network.domain] | unique | sort }}"
  when:
    - serveNet_ip is defined

- name: Generate private key for server-certificates
  community.crypto.openssl_privatekey:
    # path:                     "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/private/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem"
    path:                     "/etc/ssl/private/server-cert.pem.pem"
    # passphrase:               "{{ ssl_certificate_authority.ca_definition.layer3.passphrase }}"
    type:                     "{{ ssl_certificate_authority.ca_definition.layer3.type }}"
    # cipher:                   "auto"
    # cipher:                   "{{ ssl_certificate_authority.ca_definition.layer3.encryption }}"
    size:                     "{{ ssl_certificate_authority.ca_definition.layer3.bitlength }}"
    # owner:                    "{{ ssl_certificate_authority.ssl_user }}"
    owner:                    "root"
    # group:                    "{{ ssl_certificate_authority.ssl_group }}"
    group:                    "root"
    mode:                     "400"
    select_crypto_backend:    "cryptography"
  # delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become:       yes

- name: Generate CSR for server-certificates
  community.crypto.openssl_csr:
    path:                     "/etc/ssl/csr/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.csr"
    # privatekey_path:          "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/private/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem"
    privatekey_path:          "/etc/ssl/private/server-cert.pem.pem"
    # privatekey_passphrase:    "{{ ssl_certificate_authority.ca_definition.layer3.passphrase }}"
    common_name:              "{{ inventory_hostname }}"
    # authority_cert_issuer:    "DNS:{{ ssl_certificate_authority.cert_issuer }}"
    organization_name:        "{{ ssl_certificate_authority.ssl_certificate.organizationName }}"
    organizational_unit_name: "{{ ssl_certificate_authority.ssl_certificate.organizationalUnitName }}"
    email_address:            "{{ ssl_certificate_authority.ssl_certificate.emailAddress }}"
    country_name:             "{{ ssl_certificate_authority.ssl_certificate.countryName }}"
    state_or_province_name:   "{{ ssl_certificate_authority.ssl_certificate.stateOrProvinceName }}"
    locality_name:            "{{ ssl_certificate_authority.ssl_certificate.localityName }}"
    subject_alt_name:         "{{ ( act_dommain_list | map('regex_replace', '^', 'DNS:') | list ) + ( act_ip_address | map('regex_replace', '^', 'IP:') | list ) }}"
    basic_constraints:
      - CA:FALSE
      # - pathlen:3
    key_usage:
      - keyCertSign
      - digitalSignature
    # owner:                    "{{ ssl_certificate_authority.ssl_user }}"
    owner:                    "root"
    # group:                    "{{ ssl_certificate_authority.ssl_group }}"
    group:                    "root"
    mode:                     "400"
    select_crypto_backend:    "cryptography"
    ocsp_must_staple:         "true"
  # delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become:       yes
  register:     gen_server_certificate

- name: Fetch csr file from server
  fetch: 
    src:       "/etc/ssl/csr/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.csr"
    dest:      "{{ inventory_dir }}/dynamic_vars/files/config/ssl/server-cert/csr/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.csr"
    flat:      yes
  become:      yes
  register:     gen_server_certificate

- name: Copy csr file to ca-host
  copy: 
    src:       "{{ inventory_dir }}/dynamic_vars/files/config/ssl/server-cert/csr/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.csr"
    dest:      "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/csr/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.csr"
    owner:     "{{ ssl_certificate_authority.ssl_user }}"
    group:     "{{ ssl_certificate_authority.ssl_group }}"
    mode:      "644"
  delegate_to: "{{ ssl_certificate_authority.ssl_ca_host }}"
  become:      yes
  register:     gen_server_certificate

- name: Sign private Key with intermediate-key for server-certificates
  community.crypto.x509_certificate:
    path:                     "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem"
    csr_path:                 "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/csr/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.csr"
    privatekey_path:          "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/private/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem"
    # privatekey_passphrase:    "{{ ssl_certificate_authority.ca_definition.layer3.passphrase }}"
    provider:                 "ownca"
    ownca_not_after:          "+{{ ssl_certificate_authority.ca_definition.layer3.keeptime }}d"
    ownca_not_before:         "+0d"
    ownca_create_subject_key_identifier: "always_create"
    ownca_path:               "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/intermediate-ca/certs/{{ ssl_certificate_authority.master_intermediate_cert }}.{{ ssl_certificate_authority.ssl_certificate.organizationName}}.pem"
    ownca_privatekey_path:    "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/intermediate-ca/private/{{ ssl_certificate_authority.master_intermediate_cert }}.{{ ssl_certificate_authority.ssl_certificate.organizationName}}.pem"
    ownca_privatekey_passphrase: "{{ ssl_certificate_authority.ca_definition.layer2.passphrase }}"
    owner:                    "{{ ssl_certificate_authority.ssl_user }}"
    group:                    "{{ ssl_certificate_authority.ssl_group }}"
    mode:                     "444"
    select_crypto_backend:    "cryptography"
    return_content:           "yes"
  delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become:       yes
  register:    server_certificate
  when:        gen_server_certificate.changed

- name: Generate PKCS12 file from server certificate
  openssl_pkcs12:
    action:             export
    path:               "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.p12"
    friendly_name:      "{{ inventory_hostname }}"
    privatekey_path:    "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/private/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem"
    certificate_path:   "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem"
    other_certificates: 
      - "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/root-ca/certs/{{ ssl_certificate_authority.ca_definition.layer1.certificate_name }}.{{ ssl_certificate_authority.ssl_certificate.organizationName}}.pem"
      - "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/intermediate-ca/certs/{{ ssl_certificate_authority.master_intermediate_cert }}.{{ ssl_certificate_authority.ssl_certificate.organizationName}}.pem"
    # privatekey_passphrase:    "{{ ssl_certificate_authority.ca_definition.layer3.passphrase }}"
    passphrase:               "{{ ssl_certificate_authority.ca_definition.layer3.passphrase }}"
    owner:                    "{{ ssl_certificate_authority.ssl_user }}"
    group:                    "{{ ssl_certificate_authority.ssl_group }}"
    mode:                     "444"
    state: present
  delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become:       yes
  when:        gen_server_certificate.changed

# - name: Generate chain-file
#   command: "cat {{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem {{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/intermediate-ca/certs/{{ ssl_certificate_authority.master_intermediate_cert }}.{{ ssl_certificate_authority.ssl_certificate.organizationName}}.pem > {{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.chained.pem"
#   delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
#   become: yes
#   ignore_errors: yes

- name: Read certificates for chain-file
  command: "cat {{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem {{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/intermediate-ca/certs/{{ ssl_certificate_authority.master_intermediate_cert }}.{{ ssl_certificate_authority.ssl_certificate.organizationName}}.pem"
  register: chained_file_content
  delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become: yes
  ignore_errors: yes
  when:        gen_server_certificate.changed

- name: Write chain-file
  copy:
    dest: "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.chained.pem"
    content: "{{ chained_file_content.stdout_lines | unique |join('\n') }}"
  delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become: yes
  ignore_errors: yes
  when:        gen_server_certificate.changed

- name: Copy certificates to smb-space
  ansible.builtin.copy:
    src:   "{{ default_path.data_path }}/ssl-ca/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server/certs/{{ item.source }}"
    dest:  "{{ ssl_certificate_authority.sambadir }}/{{ ssl_certificate_authority.ssl_certificate.organizationName }}/server-certificate/{{ item.target }}"
    owner: "root"
    group: "root"
    mode:  "0644"
    remote_src: yes
  delegate_to:  "{{ ssl_certificate_authority.ssl_ca_host }}"
  become:       yes
  with_items:
    - { source: "{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.pem", target: "{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.crt" }
    - { source: "{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.chained.pem", target: "{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.chained.crt" }
    - { source: "{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.p12", target: "{{ ssl_certificate_authority.ca_definition.layer3.certificate_name }}.{{ inventory_hostname }}.p12" }
  when:         gen_intermediate_certificate.changed


# Debug-Output für die Wertzuweisung
# - name: Show actual device-name
#   ansible.builtin.debug: 
#     var: act_dev_name
# - name: Show actual IP-adresses
#   ansible.builtin.debug: 
#     var: act_ip_address
# - name: Show actual domain-names
#   ansible.builtin.debug: 
#     var: act_dommain_list

# Debug-Output für die Zertifikate und CSRs
# - name: Show CSR content
#   ansible.builtin.debug: 
#     var: gen_server_certificate
# - name: Show Certificate content
#   ansible.builtin.debug: 
#     var: server_certificate
#   when:        gen_server_certificate.changed
